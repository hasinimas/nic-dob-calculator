// src/components/TravelScenario.jsx
import React, { useState, useMemo } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import TravelQuiz from "./travel/TravelQuiz";
import TravelResult from "./travel/TravelResult";
import "./TravelScenario.css";

export default function TravelScenario() {
  const location = useLocation();
  const navigate = useNavigate();

  // NICCalculator navigates to /travel with state { birthday, age, gender, persona? }
  const nicState = location.state || {};

  // If NIC data exists use it, otherwise remain empty and quiz will still run
  const birthday = nicState.birthday || null;
  const ageFromNic = nicState.age || null;
  const gender = nicState.gender || null;

  // persona comes from quiz result (string). If NIC passed persona, it's used as default.
  const [persona, setPersona] = useState(nicState.persona || null);

  // finalResult holds the object computed by TravelResult (persona + month + ageFlavor + suggestion)
  const [finalResult, setFinalResult] = useState(null);

  // quick derived values
  const birthMonth = useMemo(() => (birthday ? new Date(birthday).getMonth() + 1 : null), [birthday]);

  return (
    <div className="travel-page">
      <header className="travel-header">
        <div className="travel-head-left">
          <h1>✈ Find Your Travel Scenario</h1>
          <p className="subtitle">A playful quiz + your NIC birth month & age make a unique trip — try it!</p>
        </div>

        <div className="travel-actions">
          {/* If NIC data not present, show a hint where to go */}
          {!birthday && (
            <button
              className="ghost"
              onClick={() => {
                // helpful: send user back to home to enter NIC
                navigate("/");
              }}
              title="Go enter NIC"
            >
              Enter NIC first
            </button>
          )}
        </div>
      </header>

      <main className="travel-main">
        <section className="quiz-column">
          <TravelQuiz
            initialPersona={persona}
            onPersonaSelect={(p) => {
              setPersona(p);
              setFinalResult(null); // clear previous final until user confirms
            }}
            onFinish={(computedPersona) => {
              // computedPersona is string persona from quiz
              setPersona(computedPersona);
              // final result will be generated by TravelResult; we still store finalResult if needed
            }}
          />
        </section>

        <aside className="preview-column">
          <h3 className="preview-title">Live Preview</h3>

          <TravelResult
            persona={persona}
            birthMonth={birthMonth}
            age={ageFromNic}
            gender={gender}
            onFinal={(payload) => setFinalResult(payload)}
            showCTA={true}
          />

          {finalResult && (
            <div className="final-note">
              <strong>Finalized:</strong> You can copy the card text for LinkedIn or share it manually.
            </div>
          )}
        </aside>
      </main>
    </div>
  );
}
