{"ast":null,"code":"// Extra fun facts & APIs for NIC DOB Calculator\n\n// --- Date utils ---\nconst fmt = {\n  ymd: d => d.toISOString().slice(0, 10),\n  mm: d => String(d.getMonth() + 1).padStart(2, '0'),\n  dd: d => String(d.getDate()).padStart(2, '0')\n};\n\n// Chinese Zodiac\nexport function chineseZodiac(year) {\n  const animals = [\"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\", \"Monkey\", \"Rooster\", \"Dog\", \"Pig\"];\n  return animals[(year - 1900) % 12];\n}\n\n// --- Famous people from Wikidata (same month/day) ---\nexport async function getFamousSameDay(month, day, limit = 5) {\n  const query = `\n    SELECT ?person ?personLabel ?description WHERE {\n      ?person wdt:P31 wd:Q5; wdt:P569 ?dob.\n      FILTER(MONTH(?dob) = ${month} && DAY(?dob) = ${day})\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n      OPTIONAL { ?person schema:description ?description FILTER (lang(?description) = \"en\") }\n    } LIMIT ${limit}\n  `;\n  const url = 'https://query.wikidata.org/sparql?format=json&query=' + encodeURIComponent(query);\n  try {\n    const res = await fetch(url, {\n      headers: {\n        'Accept': 'application/sparql-results+json'\n      }\n    });\n    if (!res.ok) throw new Error(`Wikidata request failed: ${res.status}`);\n    const json = await res.json();\n    return json.results.bindings.map(b => {\n      var _b$personLabel, _b$description, _b$person;\n      return {\n        name: (_b$personLabel = b.personLabel) === null || _b$personLabel === void 0 ? void 0 : _b$personLabel.value,\n        bio: ((_b$description = b.description) === null || _b$description === void 0 ? void 0 : _b$description.value) || '',\n        url: (_b$person = b.person) === null || _b$person === void 0 ? void 0 : _b$person.value\n      };\n    });\n  } catch (err) {\n    console.error(\"Error fetching famous people:\", err);\n    return [];\n  }\n}\n\n// --- Historical event from Wikipedia ---\nexport async function getOnThisDayEvent(month, day) {\n  const url = `https://en.wikipedia.org/api/rest_v1/feed/onthisday/events/${month}/${day}`;\n  try {\n    var _data$events;\n    const res = await fetch(url);\n    if (!res.ok) throw new Error(`Wikipedia request failed: ${res.status}`);\n    const data = await res.json();\n    const pick = data === null || data === void 0 ? void 0 : (_data$events = data.events) === null || _data$events === void 0 ? void 0 : _data$events[0];\n    if (!pick) return null;\n    return {\n      year: pick.year,\n      text: pick.text,\n      pages: (pick.pages || []).map(p => {\n        var _p$titles, _p$titles2;\n        return {\n          title: (_p$titles = p.titles) === null || _p$titles === void 0 ? void 0 : _p$titles.normalized,\n          url: `https://en.wikipedia.org/wiki/${encodeURIComponent(((_p$titles2 = p.titles) === null || _p$titles2 === void 0 ? void 0 : _p$titles2.normalized) || '')}`\n        };\n      })\n    };\n  } catch (err) {\n    console.error(\"Error fetching On This Day event:\", err);\n    return null;\n  }\n}\n\n// --- Movies from TMDb (needs API key) ---\nexport async function getMoviesByYear(year) {\n  var _window$env;\n  const key = (_window$env = window.env) === null || _window$env === void 0 ? void 0 : _window$env.TMDB_KEY; // set in your HTML: window.env = { TMDB_KEY: \"xxxx\" }\n  if (!key) {\n    console.warn(\"TMDB API key not found. Movies will not display.\");\n    return [];\n  }\n  const url = `https://api.themoviedb.org/3/discover/movie?primary_release_year=${year}&sort_by=popularity.desc&api_key=${key}`;\n  try {\n    const res = await fetch(url);\n    if (!res.ok) throw new Error(`TMDb request failed: ${res.status}`);\n    const data = await res.json();\n    return (data.results || []).slice(0, 5).map(m => ({\n      title: m.title,\n      year,\n      poster: m.poster_path ? `https://image.tmdb.org/t/p/w200${m.poster_path}` : null\n    }));\n  } catch (err) {\n    console.error(\"Error fetching movies:\", err);\n    return [];\n  }\n}\n\n// --- Orchestrator ---\nexport async function buildInsights(dob) {\n  const month = parseInt(fmt.mm(dob), 10);\n  const day = parseInt(fmt.dd(dob), 10);\n  const year = dob.getFullYear();\n  const cacheKey = `insights-${month}-${day}-${year}`;\n  const cachedRaw = localStorage.getItem(cacheKey);\n  if (cachedRaw) {\n    try {\n      const cached = JSON.parse(cachedRaw);\n      if (cached.timestamp && Date.now() - cached.timestamp < 24 * 60 * 60 * 1000) {\n        return cached.data; // use cached if less than 24h old\n      }\n    } catch (err) {\n      console.warn(\"Invalid cache, refetching insights:\", err);\n    }\n  }\n  const [people, event, movies] = await Promise.all([getFamousSameDay(month, day), getOnThisDayEvent(month, day), getMoviesByYear(year)]);\n  const payload = {\n    zodiac: chineseZodiac(year),\n    people,\n    event,\n    movies\n  };\n  localStorage.setItem(cacheKey, JSON.stringify({\n    data: payload,\n    timestamp: Date.now()\n  }));\n  return payload;\n}\n\n// --- Render function ---\nexport function renderInsights(container, data) {\n  const {\n    zodiac,\n    people,\n    event,\n    movies\n  } = data;\n  container.innerHTML = `\n    <div>\n      <h2>Fun Facts & Insights ðŸŽ‰</h2>\n      <button id=\"btnTravel\" class=\"travel-btn\">View Travel Card </button>\n    </div>\n    <div class=\"cards\">\n      <div class=\"card\">\n        <h3>Chinese Zodiac</h3>\n        <p>${zodiac}</p>\n      </div>\n      <div class=\"card\">\n        <h3>Shared Birthdays</h3>\n        ${people.length ? people.map(p => `<div class=\"line\"><a href=\"${p.url}\" target=\"_blank\">${p.name}</a> â€” ${p.bio || ''}</div>`).join('') : '<p class=\"empty\">ðŸ˜” No shared birthdays found.</p>'}\n      </div>\n      <div class=\"card\">\n        <h3>On This Day</h3>\n        ${event ? `<p><strong>${event.year}</strong> â€” ${event.text}</p>` : '<p class=\"empty\">No historical event found.</p>'}\n      </div>\n      <div class=\"card\">\n        <h3>Movies from your birth year</h3>\n        <div class=\"posters\">\n          ${movies.filter(m => m.poster).map(m => `\n            <figure>\n              <img alt=\"${m.title}\" src=\"${m.poster}\">\n              <figcaption>${m.title}</figcaption>\n            </figure>\n          `).join('')}\n        </div>\n      </div>\n    </div>\n  `;\n}\ndocument.addEventListener(\"click\", e => {\n  if (e.target.id === \"btnTravel\") {\n    alert(\"ðŸš€ New feature coming soon!\");\n    // replace with your real feature logic\n  }\n});","map":{"version":3,"names":["fmt","ymd","d","toISOString","slice","mm","String","getMonth","padStart","dd","getDate","chineseZodiac","year","animals","getFamousSameDay","month","day","limit","query","url","encodeURIComponent","res","fetch","headers","ok","Error","status","json","results","bindings","map","b","_b$personLabel","_b$description","_b$person","name","personLabel","value","bio","description","person","err","console","error","getOnThisDayEvent","_data$events","data","pick","events","text","pages","p","_p$titles","_p$titles2","title","titles","normalized","getMoviesByYear","_window$env","key","window","env","TMDB_KEY","warn","m","poster","poster_path","buildInsights","dob","parseInt","getFullYear","cacheKey","cachedRaw","localStorage","getItem","cached","JSON","parse","timestamp","Date","now","people","event","movies","Promise","all","payload","zodiac","setItem","stringify","renderInsights","container","innerHTML","length","join","filter","document","addEventListener","e","target","id","alert"],"sources":["C:/Users/HASINI/Desktop/HTML/my/nic-dob-calculator/src/utils/insights.js"],"sourcesContent":["// Extra fun facts & APIs for NIC DOB Calculator\n\n// --- Date utils ---\nconst fmt = {\n  ymd: d => d.toISOString().slice(0, 10),\n  mm: d => String(d.getMonth() + 1).padStart(2, '0'),\n  dd: d => String(d.getDate()).padStart(2, '0'),\n};\n\n// Chinese Zodiac\nexport function chineseZodiac(year) {\n  const animals = [\n    \"Rat\",\"Ox\",\"Tiger\",\"Rabbit\",\"Dragon\",\"Snake\",\n    \"Horse\",\"Goat\",\"Monkey\",\"Rooster\",\"Dog\",\"Pig\"\n  ];\n  return animals[(year - 1900) % 12];\n}\n\n// --- Famous people from Wikidata (same month/day) ---\nexport async function getFamousSameDay(month, day, limit = 5) {\n  const query = `\n    SELECT ?person ?personLabel ?description WHERE {\n      ?person wdt:P31 wd:Q5; wdt:P569 ?dob.\n      FILTER(MONTH(?dob) = ${month} && DAY(?dob) = ${day})\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n      OPTIONAL { ?person schema:description ?description FILTER (lang(?description) = \"en\") }\n    } LIMIT ${limit}\n  `;\n  const url = 'https://query.wikidata.org/sparql?format=json&query=' + encodeURIComponent(query);\n\n  try {\n    const res = await fetch(url, { headers: { 'Accept': 'application/sparql-results+json' } });\n    if (!res.ok) throw new Error(`Wikidata request failed: ${res.status}`);\n    const json = await res.json();\n    return json.results.bindings.map(b => ({\n      name: b.personLabel?.value,\n      bio: b.description?.value || '',\n      url: b.person?.value\n    }));\n  } catch (err) {\n    console.error(\"Error fetching famous people:\", err);\n    return [];\n  }\n}\n\n// --- Historical event from Wikipedia ---\nexport async function getOnThisDayEvent(month, day) {\n  const url = `https://en.wikipedia.org/api/rest_v1/feed/onthisday/events/${month}/${day}`;\n  try {\n    const res = await fetch(url);\n    if (!res.ok) throw new Error(`Wikipedia request failed: ${res.status}`);\n    const data = await res.json();\n    const pick = data?.events?.[0];\n    if (!pick) return null;\n    return {\n      year: pick.year,\n      text: pick.text,\n      pages: (pick.pages || []).map(p => ({\n        title: p.titles?.normalized,\n        url: `https://en.wikipedia.org/wiki/${encodeURIComponent(p.titles?.normalized || '')}`\n      }))\n    };\n  } catch (err) {\n    console.error(\"Error fetching On This Day event:\", err);\n    return null;\n  }\n}\n\n// --- Movies from TMDb (needs API key) ---\nexport async function getMoviesByYear(year) {\n  const key = window.env?.TMDB_KEY; // set in your HTML: window.env = { TMDB_KEY: \"xxxx\" }\n  if (!key) {\n    console.warn(\"TMDB API key not found. Movies will not display.\");\n    return [];\n  }\n  const url = `https://api.themoviedb.org/3/discover/movie?primary_release_year=${year}&sort_by=popularity.desc&api_key=${key}`;\n  \n  try {\n    const res = await fetch(url);\n    if (!res.ok) throw new Error(`TMDb request failed: ${res.status}`);\n    const data = await res.json();\n    return (data.results || []).slice(0, 5).map(m => ({\n      title: m.title,\n      year,\n      poster: m.poster_path ? `https://image.tmdb.org/t/p/w200${m.poster_path}` : null\n    }));\n  } catch (err) {\n    console.error(\"Error fetching movies:\", err);\n    return [];\n  }\n}\n\n// --- Orchestrator ---\nexport async function buildInsights(dob) {\n  const month = parseInt(fmt.mm(dob), 10);\n  const day   = parseInt(fmt.dd(dob), 10);\n  const year  = dob.getFullYear();\n\n  const cacheKey = `insights-${month}-${day}-${year}`;\n  const cachedRaw = localStorage.getItem(cacheKey);\n  if (cachedRaw) {\n    try {\n      const cached = JSON.parse(cachedRaw);\n      if (cached.timestamp && (Date.now() - cached.timestamp < 24 * 60 * 60 * 1000)) {\n        return cached.data; // use cached if less than 24h old\n      }\n    } catch (err) {\n      console.warn(\"Invalid cache, refetching insights:\", err);\n    }\n  }\n\n  const [people, event, movies] = await Promise.all([\n    getFamousSameDay(month, day),\n    getOnThisDayEvent(month, day),\n    getMoviesByYear(year)\n  ]);\n\n  const payload = {\n    zodiac: chineseZodiac(year),\n    people,\n    event,\n    movies\n  };\n\n  localStorage.setItem(cacheKey, JSON.stringify({ data: payload, timestamp: Date.now() }));\n  return payload;\n}\n\n// --- Render function ---\nexport function renderInsights(container, data) {\n  const { zodiac, people, event, movies } = data;\n\n  container.innerHTML = `\n    <div>\n      <h2>Fun Facts & Insights ðŸŽ‰</h2>\n      <button id=\"btnTravel\" class=\"travel-btn\">View Travel Card </button>\n    </div>\n    <div class=\"cards\">\n      <div class=\"card\">\n        <h3>Chinese Zodiac</h3>\n        <p>${zodiac}</p>\n      </div>\n      <div class=\"card\">\n        <h3>Shared Birthdays</h3>\n        ${people.length ? people.map(p =>\n          `<div class=\"line\"><a href=\"${p.url}\" target=\"_blank\">${p.name}</a> â€” ${p.bio || ''}</div>`\n        ).join('') : '<p class=\"empty\">ðŸ˜” No shared birthdays found.</p>'}\n      </div>\n      <div class=\"card\">\n        <h3>On This Day</h3>\n        ${event ? `<p><strong>${event.year}</strong> â€” ${event.text}</p>` : '<p class=\"empty\">No historical event found.</p>'}\n      </div>\n      <div class=\"card\">\n        <h3>Movies from your birth year</h3>\n        <div class=\"posters\">\n          ${movies.filter(m => m.poster).map(m => `\n            <figure>\n              <img alt=\"${m.title}\" src=\"${m.poster}\">\n              <figcaption>${m.title}</figcaption>\n            </figure>\n          `).join('')}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\ndocument.addEventListener(\"click\", (e) => {\n  if (e.target.id === \"btnTravel\") {\n    alert(\"ðŸš€ New feature coming soon!\");\n    // replace with your real feature logic\n  }\n});"],"mappings":"AAAA;;AAEA;AACA,MAAMA,GAAG,GAAG;EACVC,GAAG,EAAEC,CAAC,IAAIA,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EACtCC,EAAE,EAAEH,CAAC,IAAII,MAAM,CAACJ,CAAC,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAClDC,EAAE,EAAEP,CAAC,IAAII,MAAM,CAACJ,CAAC,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG;AAC9C,CAAC;;AAED;AACA,OAAO,SAASG,aAAaA,CAACC,IAAI,EAAE;EAClC,MAAMC,OAAO,GAAG,CACd,KAAK,EAAC,IAAI,EAAC,OAAO,EAAC,QAAQ,EAAC,QAAQ,EAAC,OAAO,EAC5C,OAAO,EAAC,MAAM,EAAC,QAAQ,EAAC,SAAS,EAAC,KAAK,EAAC,KAAK,CAC9C;EACD,OAAOA,OAAO,CAAC,CAACD,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;AACpC;;AAEA;AACA,OAAO,eAAeE,gBAAgBA,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,GAAG,CAAC,EAAE;EAC5D,MAAMC,KAAK,GAAG;AAChB;AACA;AACA,6BAA6BH,KAAK,mBAAmBC,GAAG;AACxD;AACA;AACA,cAAcC,KAAK;AACnB,GAAG;EACD,MAAME,GAAG,GAAG,sDAAsD,GAAGC,kBAAkB,CAACF,KAAK,CAAC;EAE9F,IAAI;IACF,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;MAAEI,OAAO,EAAE;QAAE,QAAQ,EAAE;MAAkC;IAAE,CAAC,CAAC;IAC1F,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4BJ,GAAG,CAACK,MAAM,EAAE,CAAC;IACtE,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAI,CAAC,CAAC;IAC7B,OAAOA,IAAI,CAACC,OAAO,CAACC,QAAQ,CAACC,GAAG,CAACC,CAAC;MAAA,IAAAC,cAAA,EAAAC,cAAA,EAAAC,SAAA;MAAA,OAAK;QACrCC,IAAI,GAAAH,cAAA,GAAED,CAAC,CAACK,WAAW,cAAAJ,cAAA,uBAAbA,cAAA,CAAeK,KAAK;QAC1BC,GAAG,EAAE,EAAAL,cAAA,GAAAF,CAAC,CAACQ,WAAW,cAAAN,cAAA,uBAAbA,cAAA,CAAeI,KAAK,KAAI,EAAE;QAC/BlB,GAAG,GAAAe,SAAA,GAAEH,CAAC,CAACS,MAAM,cAAAN,SAAA,uBAARA,SAAA,CAAUG;MACjB,CAAC;IAAA,CAAC,CAAC;EACL,CAAC,CAAC,OAAOI,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;IACnD,OAAO,EAAE;EACX;AACF;;AAEA;AACA,OAAO,eAAeG,iBAAiBA,CAAC7B,KAAK,EAAEC,GAAG,EAAE;EAClD,MAAMG,GAAG,GAAG,8DAA8DJ,KAAK,IAAIC,GAAG,EAAE;EACxF,IAAI;IAAA,IAAA6B,YAAA;IACF,MAAMxB,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;IAC5B,IAAI,CAACE,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6BJ,GAAG,CAACK,MAAM,EAAE,CAAC;IACvE,MAAMoB,IAAI,GAAG,MAAMzB,GAAG,CAACM,IAAI,CAAC,CAAC;IAC7B,MAAMoB,IAAI,GAAGD,IAAI,aAAJA,IAAI,wBAAAD,YAAA,GAAJC,IAAI,CAAEE,MAAM,cAAAH,YAAA,uBAAZA,YAAA,CAAe,CAAC,CAAC;IAC9B,IAAI,CAACE,IAAI,EAAE,OAAO,IAAI;IACtB,OAAO;MACLnC,IAAI,EAAEmC,IAAI,CAACnC,IAAI;MACfqC,IAAI,EAAEF,IAAI,CAACE,IAAI;MACfC,KAAK,EAAE,CAACH,IAAI,CAACG,KAAK,IAAI,EAAE,EAAEpB,GAAG,CAACqB,CAAC;QAAA,IAAAC,SAAA,EAAAC,UAAA;QAAA,OAAK;UAClCC,KAAK,GAAAF,SAAA,GAAED,CAAC,CAACI,MAAM,cAAAH,SAAA,uBAARA,SAAA,CAAUI,UAAU;UAC3BrC,GAAG,EAAE,iCAAiCC,kBAAkB,CAAC,EAAAiC,UAAA,GAAAF,CAAC,CAACI,MAAM,cAAAF,UAAA,uBAARA,UAAA,CAAUG,UAAU,KAAI,EAAE,CAAC;QACtF,CAAC;MAAA,CAAC;IACJ,CAAC;EACH,CAAC,CAAC,OAAOf,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEF,GAAG,CAAC;IACvD,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,eAAegB,eAAeA,CAAC7C,IAAI,EAAE;EAAA,IAAA8C,WAAA;EAC1C,MAAMC,GAAG,IAAAD,WAAA,GAAGE,MAAM,CAACC,GAAG,cAAAH,WAAA,uBAAVA,WAAA,CAAYI,QAAQ,CAAC,CAAC;EAClC,IAAI,CAACH,GAAG,EAAE;IACRjB,OAAO,CAACqB,IAAI,CAAC,kDAAkD,CAAC;IAChE,OAAO,EAAE;EACX;EACA,MAAM5C,GAAG,GAAG,oEAAoEP,IAAI,oCAAoC+C,GAAG,EAAE;EAE7H,IAAI;IACF,MAAMtC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;IAC5B,IAAI,CAACE,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwBJ,GAAG,CAACK,MAAM,EAAE,CAAC;IAClE,MAAMoB,IAAI,GAAG,MAAMzB,GAAG,CAACM,IAAI,CAAC,CAAC;IAC7B,OAAO,CAACmB,IAAI,CAAClB,OAAO,IAAI,EAAE,EAAExB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC0B,GAAG,CAACkC,CAAC,KAAK;MAChDV,KAAK,EAAEU,CAAC,CAACV,KAAK;MACd1C,IAAI;MACJqD,MAAM,EAAED,CAAC,CAACE,WAAW,GAAG,kCAAkCF,CAAC,CAACE,WAAW,EAAE,GAAG;IAC9E,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOzB,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;IAC5C,OAAO,EAAE;EACX;AACF;;AAEA;AACA,OAAO,eAAe0B,aAAaA,CAACC,GAAG,EAAE;EACvC,MAAMrD,KAAK,GAAGsD,QAAQ,CAACrE,GAAG,CAACK,EAAE,CAAC+D,GAAG,CAAC,EAAE,EAAE,CAAC;EACvC,MAAMpD,GAAG,GAAKqD,QAAQ,CAACrE,GAAG,CAACS,EAAE,CAAC2D,GAAG,CAAC,EAAE,EAAE,CAAC;EACvC,MAAMxD,IAAI,GAAIwD,GAAG,CAACE,WAAW,CAAC,CAAC;EAE/B,MAAMC,QAAQ,GAAG,YAAYxD,KAAK,IAAIC,GAAG,IAAIJ,IAAI,EAAE;EACnD,MAAM4D,SAAS,GAAGC,YAAY,CAACC,OAAO,CAACH,QAAQ,CAAC;EAChD,IAAIC,SAAS,EAAE;IACb,IAAI;MACF,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;MACpC,IAAIG,MAAM,CAACG,SAAS,IAAKC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGL,MAAM,CAACG,SAAS,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAK,EAAE;QAC7E,OAAOH,MAAM,CAAC7B,IAAI,CAAC,CAAC;MACtB;IACF,CAAC,CAAC,OAAOL,GAAG,EAAE;MACZC,OAAO,CAACqB,IAAI,CAAC,qCAAqC,EAAEtB,GAAG,CAAC;IAC1D;EACF;EAEA,MAAM,CAACwC,MAAM,EAAEC,KAAK,EAAEC,MAAM,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAChDvE,gBAAgB,CAACC,KAAK,EAAEC,GAAG,CAAC,EAC5B4B,iBAAiB,CAAC7B,KAAK,EAAEC,GAAG,CAAC,EAC7ByC,eAAe,CAAC7C,IAAI,CAAC,CACtB,CAAC;EAEF,MAAM0E,OAAO,GAAG;IACdC,MAAM,EAAE5E,aAAa,CAACC,IAAI,CAAC;IAC3BqE,MAAM;IACNC,KAAK;IACLC;EACF,CAAC;EAEDV,YAAY,CAACe,OAAO,CAACjB,QAAQ,EAAEK,IAAI,CAACa,SAAS,CAAC;IAAE3C,IAAI,EAAEwC,OAAO;IAAER,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;EAAE,CAAC,CAAC,CAAC;EACxF,OAAOM,OAAO;AAChB;;AAEA;AACA,OAAO,SAASI,cAAcA,CAACC,SAAS,EAAE7C,IAAI,EAAE;EAC9C,MAAM;IAAEyC,MAAM;IAAEN,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGrC,IAAI;EAE9C6C,SAAS,CAACC,SAAS,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaL,MAAM;AACnB;AACA;AACA;AACA,UAAUN,MAAM,CAACY,MAAM,GAAGZ,MAAM,CAACnD,GAAG,CAACqB,CAAC,IAC5B,8BAA8BA,CAAC,CAAChC,GAAG,qBAAqBgC,CAAC,CAAChB,IAAI,UAAUgB,CAAC,CAACb,GAAG,IAAI,EAAE,QACrF,CAAC,CAACwD,IAAI,CAAC,EAAE,CAAC,GAAG,oDAAoD;AACzE;AACA;AACA;AACA,UAAUZ,KAAK,GAAG,cAAcA,KAAK,CAACtE,IAAI,eAAesE,KAAK,CAACjC,IAAI,MAAM,GAAG,iDAAiD;AAC7H;AACA;AACA;AACA;AACA,YAAYkC,MAAM,CAACY,MAAM,CAAC/B,CAAC,IAAIA,CAAC,CAACC,MAAM,CAAC,CAACnC,GAAG,CAACkC,CAAC,IAAI;AAClD;AACA,0BAA0BA,CAAC,CAACV,KAAK,UAAUU,CAAC,CAACC,MAAM;AACnD,4BAA4BD,CAAC,CAACV,KAAK;AACnC;AACA,WAAW,CAAC,CAACwC,IAAI,CAAC,EAAE,CAAC;AACrB;AACA;AACA;AACA,GAAG;AACH;AAEAE,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAGC,CAAC,IAAK;EACxC,IAAIA,CAAC,CAACC,MAAM,CAACC,EAAE,KAAK,WAAW,EAAE;IAC/BC,KAAK,CAAC,6BAA6B,CAAC;IACpC;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}